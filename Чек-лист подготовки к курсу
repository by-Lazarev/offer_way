# ✅ Чек-лист: Необходимое для старта курса

Минимальный набор знаний и навыков, достаточный для выполнения тестового задания (CRUD + lottery + PostgreSQL + Docker) и комфортного старта в основном курсе.

---

## 1. Языки и разработка

- [ ] Код на Python или Go запускается локально
- [ ] Понимание синтаксиса языка на уровне:
  - создание и вызов функций
  - работа со строками и коллекциями
  - использование встроенных типов данных (массивы, словари и др.)
  - структура проекта и импорт модулей

---

## 2. Работа с API

- [ ] Понимание принципов REST API
- [ ] Умение реализовать CRUD-эндпоинты:
  - GET /users
  - POST /users
  - PUT /users/{id}
  - DELETE /users/{id}
- [ ] Понимание асинхронных вызовов (async/await)
- [ ] Опыт работы с документацией API (например, Swagger/OpenAPI)

---

## 3. Базы данных

- [ ] Подключение к PostgreSQL из приложения
- [ ] Создание таблиц с полями id, name, email
- [ ] Выполнение базовых SQL-запросов: SELECT, INSERT, UPDATE, DELETE

---

## 4. Git и GitHub

- [ ] Инициализация репозитория
- [ ] Работа с ветками и коммитами
- [ ] Отправка изменений в удалённый репозиторий
- [ ] Создание Pull Request

---

## 5. Docker

- [ ] Запуск проекта с использованием `docker-compose`
- [ ] Понимание структуры `Dockerfile` и `docker-compose.yml`
- [ ] Сборка и запуск образа с помощью команды `docker compose up --build`

---

## 6. Проверка кода

- [ ] Написание и запуск простых автотестов (например, с использованием `pytest`)
- [ ] Понимание концепции покрытия тестами и способов его измерения

---

## 7. Установленные инструменты

- [ ] IDE для программирования (например, VSCode, PyCharm, GoLand)
- [ ] Docker и Docker Compose
- [ ] PostgreSQL (локально или в контейнере)
- [ ] Git
- [ ] Аккаунт на GitHub
- [ ] Аккаунт в Telegram

---

Если какие-либо пункты вызывают затруднения — это не препятствие. В рамках первого блока будет задание для самопроверки и помощи в устранении пробелов.
